{"ast":null,"code":"import _classCallCheck from \"/home/russ/Documents/spotify/spotify-react-demo/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/russ/Documents/spotify/spotify-react-demo/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/russ/Documents/spotify/spotify-react-demo/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/russ/Documents/spotify/spotify-react-demo/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/russ/Documents/spotify/spotify-react-demo/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/russ/Documents/spotify/spotify-react-demo/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/home/russ/Documents/spotify/spotify-react-demo/src/SpotifyPlayerContainer.tsx\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { ScriptCache } from './ScriptCache';\nimport { SpotifyAccess } from './SpotifyAccess';\nimport { getSpotifyAccess } from './LocalStorageData';\nimport { FaPause, FaPlay } from 'react-icons/fa';\nimport styles from './App.module.css';\n\nvar SpotifyPlayerContainer = /*#__PURE__*/function (_Component) {\n  _inherits(SpotifyPlayerContainer, _Component);\n\n  var _super = _createSuper(SpotifyPlayerContainer);\n\n  function SpotifyPlayerContainer(props) {\n    var _this;\n\n    _classCallCheck(this, SpotifyPlayerContainer);\n\n    _this = _super.call(this, props);\n    _this.connectToPlayerTimeout = void 0;\n\n    _this.spotifySDKCallback = function () {\n      window.onSpotifyWebPlaybackSDKReady = function () {\n        if (_this.state.spotifyAccess !== SpotifyAccess.DENIED) {\n          console.log('in Access Token', _this.state.spotifyAccessToken);\n          var spotifyPlayer = new Spotify.Player({\n            name: 'React Spotify Player',\n            getOAuthToken: function getOAuthToken(cb) {\n              cb(_this.state.spotifyAccessToken);\n            }\n          }); // Playback status updates\n\n          spotifyPlayer.addListener('player_state_changed', function (state) {\n            console.log('state in spotifyPlayer', state);\n          });\n\n          _this.setState({\n            loadingState: 'spotify scripts loaded',\n            spotifyPlayer: spotifyPlayer\n          });\n\n          if (_this.state.spotifyAccessToken !== null) {\n            _this.setState({\n              spotifyAccess: SpotifyAccess.ALLOWED,\n              loadingState: 'spotify token retrieved'\n            });\n\n            _this.connectToPlayer();\n          }\n        } else {\n          _this.setState({\n            loadingState: 'spotify authorization rejected'\n          });\n        }\n      };\n    };\n\n    _this.authorizeSpotifyFromStorage = function (e) {\n      console.log('in auth line 90');\n\n      if (e.key === 'spotifyAuthToken') {\n        var spotifyAccessToken = e.newValue;\n        var spotifyAccess = getSpotifyAccess();\n        console.log('spotifyAccess', spotifyAccess);\n\n        if (spotifyAccess === SpotifyAccess.DENIED) {\n          _this.setState({\n            spotifyAccess: SpotifyAccess.DENIED,\n            loadingState: 'spotify access denied'\n          });\n        } else if (spotifyAccessToken !== null) {\n          _this.setState({\n            spotifyAccessToken: spotifyAccessToken,\n            spotifyAccess: SpotifyAccess.ALLOWED,\n            loadingState: 'spotify token retrieved'\n          });\n        }\n\n        _this.connectToPlayer();\n      }\n    };\n\n    _this.connectToPlayer = function () {\n      console.log('in connect player');\n\n      if (_this.state.spotifyPlayer) {\n        clearTimeout(_this.connectToPlayerTimeout); // Ready\n\n        _this.state.spotifyPlayer.addListener('ready', function (_ref) {\n          var device_id = _ref.device_id;\n          console.log('Ready with Device ID', device_id);\n\n          _this.setState({\n            loadingState: 'spotify player ready',\n            spotifyDeviceId: device_id,\n            spotifyPlayerReady: true\n          });\n        }); // Not Ready\n\n\n        _this.state.spotifyPlayer.addListener('not_ready', function (_ref2) {\n          var device_id = _ref2.device_id;\n          console.log('Device ID has gone offline', device_id);\n        });\n\n        _this.state.spotifyPlayer.connect().then(function (ev) {\n          _this.setState({\n            loadingState: 'connected to player'\n          });\n        });\n      } else {\n        console.log('in timeout');\n        _this.connectToPlayerTimeout = setTimeout(_this.connectToPlayer.bind(_assertThisInitialized(_this)), 1000);\n      }\n    };\n\n    _this.startPlayback = function (spotify_uri) {\n      var _token = _this.state.spotifyAccessToken; // fetch(\"https://api.spotify.com/v1/me/player/play?\" +\n      //     \"device_id=\" + this.state.spotifyDeviceId, {\n      //     crossDomain: 'true',\n      //     method: 'PUT',\n      //     body: JSON.stringify({uris: [spotify_uri]}),\n      //     headers: {\n      //         'Content-Type': 'application/json',\n      //         'Authorization': `Bearer ${this.state.spotifyAccessToken}`\n      //     }\n      //     // data: '{\"uris\": [\"spotify:track:5ya2gsaIhTkAuWYEMB0nw5\"]}',\n      //     // beforeSend: function (xhr: any) {\n      //     //         xhr.setRequestHeader('Authorization', 'Bearer ' + _token);\n      //     //     },\n      // })\n\n      var url = 'https://api.spotify.com/v1/me/player/play?' + 'device_id=' + _this.state.spotifyDeviceId;\n      var headers = {\n        'Content-Type': 'application/json',\n        Authorization: \"Bearer \".concat(_this.state.spotifyAccessToken)\n      };\n      var body = JSON.stringify({\n        uris: [spotify_uri]\n      });\n      var params = {\n        headers: headers,\n        method: 'PUT',\n        body: body\n      };\n      fetch(url, params).then(function (resolve) {\n        console.log('resolve line 159', resolve);\n\n        if (resolve.status === 403) {\n          _this.setState({\n            loadingState: 'you need to upgrade to premium for playback',\n            spotifyAccess: SpotifyAccess.NO_PREMIUM\n          });\n        } else {\n          _this.setState({\n            loadingState: 'playback started',\n            playbackOn: true,\n            playbackPaused: false\n          });\n\n          console.log('Started playback', _this.state);\n        }\n      }).catch(function (error) {\n        _this.setState({\n          loadingState: 'playback error: ' + error\n        });\n      });\n    };\n\n    _this.resumePlayback = function () {\n      fetch('https://api.spotify.com/v1/me/player/play?' + 'device_id=' + _this.state.spotifyDeviceId, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: \"Bearer \".concat(_this.state.spotifyAccessToken)\n        }\n      }).then(function (ev) {\n        _this.setState({\n          playbackPaused: false\n        });\n      });\n      console.log('Started playback', _this.state);\n    };\n\n    _this.pauseTrack = function () {\n      fetch('https://api.spotify.com/v1/me/player/pause?' + 'device_id=' + _this.state.spotifyDeviceId, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: \"Bearer \".concat(_this.state.spotifyAccessToken)\n        }\n      }).then(function (ev) {\n        _this.setState({\n          playbackPaused: true\n        });\n      });\n    };\n\n    new ScriptCache([{\n      name: 'https://sdk.scdn.co/spotify-player.js',\n      callback: _this.spotifySDKCallback\n    }]);\n    window.addEventListener('storage', _this.authorizeSpotifyFromStorage);\n    _this.state = {\n      loadingState: 'loading scripts',\n      spotifyAccessToken: props.token,\n      spotifyDeviceId: '',\n      spotifyAuthorizationGranted: false,\n      spotifyPlayerConnected: true,\n      spotifyPlayerReady: false,\n      spotifySDKLoaded: false,\n      spotifyPlayer: undefined,\n      spotifyAccess: SpotifyAccess.NOT_REQUESTED,\n      playbackOn: false,\n      playbackPaused: false\n    };\n    return _this;\n  }\n\n  _createClass(SpotifyPlayerContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      console.log('state spotifyPlayerReady', this.state.spotifyPlayerReady);\n      console.log('state playbackOn', this.state.playbackOn);\n      console.log('state playingRecordingId', this.props.playingRecordingId);\n      console.log('state playbackPaused', this.state.playbackPaused);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: styles.app,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 9\n        }\n      }, \"Spotify\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: styles.player,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 9\n        }\n      }, this.state.spotifyPlayerReady && /*#__PURE__*/React.createElement(\"div\", {\n        onClick: function onClick() {\n          if (!_this2.state.playbackOn) {\n            _this2.startPlayback(_this2.props.playingRecordingId);\n          } else {\n            console.log('click to pause');\n\n            if (_this2.state.playbackPaused) {\n              _this2.resumePlayback();\n            }\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(FaPlay, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 15\n        }\n      })), this.state.spotifyPlayerReady && this.state.playbackOn && /*#__PURE__*/React.createElement(\"div\", {\n        onClick: function onClick() {\n          console.log('');\n\n          if (!_this2.state.playbackPaused) {\n            _this2.pauseTrack();\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(FaPause, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 15\n        }\n      }))), /*#__PURE__*/React.createElement(\"p\", {\n        className: styles.statusMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 9\n        }\n      }, this.state.loadingState));\n    }\n  }]);\n\n  return SpotifyPlayerContainer;\n}(Component);\n\nexport default SpotifyPlayerContainer;","map":{"version":3,"sources":["/home/russ/Documents/spotify/spotify-react-demo/src/SpotifyPlayerContainer.tsx"],"names":["React","Component","ScriptCache","SpotifyAccess","getSpotifyAccess","FaPause","FaPlay","styles","SpotifyPlayerContainer","props","connectToPlayerTimeout","spotifySDKCallback","window","onSpotifyWebPlaybackSDKReady","state","spotifyAccess","DENIED","console","log","spotifyAccessToken","spotifyPlayer","Spotify","Player","name","getOAuthToken","cb","addListener","setState","loadingState","ALLOWED","connectToPlayer","authorizeSpotifyFromStorage","e","key","newValue","clearTimeout","device_id","spotifyDeviceId","spotifyPlayerReady","connect","then","ev","setTimeout","bind","startPlayback","spotify_uri","_token","url","headers","Authorization","body","JSON","stringify","uris","params","method","fetch","resolve","status","NO_PREMIUM","playbackOn","playbackPaused","catch","error","resumePlayback","pauseTrack","callback","addEventListener","token","spotifyAuthorizationGranted","spotifyPlayerConnected","spotifySDKLoaded","undefined","NOT_REQUESTED","playingRecordingId","app","player","statusMessage"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { ScriptCache } from './ScriptCache';\nimport SpotifyAuthWindow from './SpotifyAuthWindow';\nimport { SpotifyAccess } from './SpotifyAccess';\nimport { getSpotifyAccess, getSpotifyAccessToken } from './LocalStorageData';\nimport { FaPause, FaPlay } from 'react-icons/fa';\nimport styles from './App.module.css';\nimport { puts } from 'util';\n\ninterface ISpotifyPlayerProps {\n  playingRecordingId: string;\n  token: string;\n}\n\ninterface ISpotifyPlayerState {\n  loadingState: string;\n  spotifyAccessToken: string;\n  spotifyAccess: SpotifyAccess;\n  spotifyDeviceId: string;\n  spotifySDKLoaded: boolean;\n  spotifyAuthorizationGranted: boolean;\n  spotifyPlayerConnected: boolean;\n  spotifyPlayerReady: boolean;\n  spotifyPlayer: Spotify.SpotifyPlayer | undefined;\n  playbackOn: boolean;\n  playbackPaused: boolean;\n}\n\nclass SpotifyPlayerContainer extends Component<\n  ISpotifyPlayerProps,\n  ISpotifyPlayerState\n> {\n  private connectToPlayerTimeout: any;\n\n  public constructor(props: ISpotifyPlayerProps) {\n    super(props);\n\n    new ScriptCache([\n      {\n        name: 'https://sdk.scdn.co/spotify-player.js',\n        callback: this.spotifySDKCallback,\n      },\n    ]);\n\n    window.addEventListener('storage', this.authorizeSpotifyFromStorage);\n\n    this.state = {\n      loadingState: 'loading scripts',\n      spotifyAccessToken: props.token,\n      spotifyDeviceId: '',\n      spotifyAuthorizationGranted: false,\n      spotifyPlayerConnected: true,\n      spotifyPlayerReady: false,\n      spotifySDKLoaded: false,\n      spotifyPlayer: undefined,\n      spotifyAccess: SpotifyAccess.NOT_REQUESTED,\n      playbackOn: false,\n      playbackPaused: false,\n    };\n  }\n\n  private spotifySDKCallback = () => {\n    window.onSpotifyWebPlaybackSDKReady = () => {\n      if (this.state.spotifyAccess !== SpotifyAccess.DENIED) {\n        console.log('in Access Token', this.state.spotifyAccessToken);\n        const spotifyPlayer = new Spotify.Player({\n          name: 'React Spotify Player',\n          getOAuthToken: (cb) => {\n            cb(this.state.spotifyAccessToken);\n          },\n        });\n\n        // Playback status updates\n        spotifyPlayer.addListener('player_state_changed', (state) => {\n           console.log('state in spotifyPlayer',state);\n        });\n\n        this.setState({\n          loadingState: 'spotify scripts loaded',\n          spotifyPlayer,\n        });\n\n        if (this.state.spotifyAccessToken !== null) {\n          this.setState({\n            spotifyAccess: SpotifyAccess.ALLOWED,\n            loadingState: 'spotify token retrieved',\n          });\n          this.connectToPlayer();\n        }\n      } else {\n        this.setState({ loadingState: 'spotify authorization rejected' });\n      }\n    };\n  };\n\n  private authorizeSpotifyFromStorage = (e: StorageEvent) => {\n    console.log('in auth line 90');\n    if (e.key === 'spotifyAuthToken') {\n      const spotifyAccessToken = e.newValue;\n\n      const spotifyAccess = getSpotifyAccess();\n      console.log('spotifyAccess', spotifyAccess);\n      if (spotifyAccess === SpotifyAccess.DENIED) {\n        this.setState({\n          spotifyAccess: SpotifyAccess.DENIED,\n          loadingState: 'spotify access denied',\n        });\n      } else if (spotifyAccessToken !== null) {\n        this.setState({\n          spotifyAccessToken: spotifyAccessToken,\n          spotifyAccess: SpotifyAccess.ALLOWED,\n          loadingState: 'spotify token retrieved',\n        });\n      }\n      this.connectToPlayer();\n    }\n  };\n\n  private connectToPlayer = () => {\n    console.log('in connect player');\n    if (this.state.spotifyPlayer) {\n      clearTimeout(this.connectToPlayerTimeout);\n      // Ready\n      this.state.spotifyPlayer.addListener('ready', ({ device_id }) => {\n        console.log('Ready with Device ID', device_id);\n        this.setState({\n          loadingState: 'spotify player ready',\n          spotifyDeviceId: device_id,\n          spotifyPlayerReady: true,\n        });\n      });\n\n      // Not Ready\n      this.state.spotifyPlayer.addListener('not_ready', ({ device_id }) => {\n        console.log('Device ID has gone offline', device_id);\n      });\n\n      this.state.spotifyPlayer.connect().then((ev: any) => {\n        this.setState({ loadingState: 'connected to player' });\n      });\n    } else {\n        console.log('in timeout')\n      this.connectToPlayerTimeout = setTimeout(\n        this.connectToPlayer.bind(this),\n        1000\n      );\n    }\n  };\n  // private startPlayback  {\n  //     $.ajax({\n  //       url: 'https://api.spotify.com/v1/me/player/play?device_id=' + device_id,\n  //       type: 'PUT',\n  //       data: '{\"uris\": [\"spotify:track:5ya2gsaIhTkAuWYEMB0nw5\"]}',\n  //       beforeSend: function (xhr) {\n  //         xhr.setRequestHeader('Authorization', 'Bearer ' + _token);\n  //       },\n  //       success: function (data) {\n  //         console.log(data);\n  //       },\n  //     });\n  //   }\n\n  private startPlayback = (spotify_uri: string) => {\n    const _token = this.state.spotifyAccessToken;\n    // fetch(\"https://api.spotify.com/v1/me/player/play?\" +\n    //     \"device_id=\" + this.state.spotifyDeviceId, {\n    //     crossDomain: 'true',\n    //     method: 'PUT',\n    //     body: JSON.stringify({uris: [spotify_uri]}),\n    //     headers: {\n    //         'Content-Type': 'application/json',\n    //         'Authorization': `Bearer ${this.state.spotifyAccessToken}`\n    //     }\n    //     // data: '{\"uris\": [\"spotify:track:5ya2gsaIhTkAuWYEMB0nw5\"]}',\n    //     // beforeSend: function (xhr: any) {\n    //     //         xhr.setRequestHeader('Authorization', 'Bearer ' + _token);\n    //     //     },\n    // })\n    const url =\n      'https://api.spotify.com/v1/me/player/play?' +\n      'device_id=' +\n      this.state.spotifyDeviceId;\n    const headers = {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${this.state.spotifyAccessToken}`,\n    };\n    const body = JSON.stringify({ uris: [spotify_uri] });\n    let params: RequestInit = {\n      headers: headers,\n      method: 'PUT',\n      body: body,\n    };\n\n    fetch(url, params)\n      .then((resolve) => {\n        console.log('resolve line 159', resolve);\n        if (resolve.status === 403) {\n          this.setState({\n            loadingState: 'you need to upgrade to premium for playback',\n            spotifyAccess: SpotifyAccess.NO_PREMIUM,\n          });\n        } else {\n          this.setState({\n            loadingState: 'playback started',\n            playbackOn: true,\n            playbackPaused: false,\n          });\n          console.log('Started playback', this.state);\n        }\n      })\n      .catch((error) => {\n        this.setState({ loadingState: 'playback error: ' + error });\n      });\n  };\n\n  private resumePlayback = () => {\n    fetch(\n      'https://api.spotify.com/v1/me/player/play?' +\n        'device_id=' +\n        this.state.spotifyDeviceId,\n      {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${this.state.spotifyAccessToken}`,\n        },\n      }\n    ).then((ev) => {\n      this.setState({ playbackPaused: false });\n    });\n    console.log('Started playback', this.state);\n  };\n\n  private pauseTrack = () => {\n    fetch(\n      'https://api.spotify.com/v1/me/player/pause?' +\n        'device_id=' +\n        this.state.spotifyDeviceId,\n      {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${this.state.spotifyAccessToken}`,\n        },\n      }\n    ).then((ev) => {\n      this.setState({ playbackPaused: true });\n    });\n  };\n\n  render() {\n    console.log('state spotifyPlayerReady', this.state.spotifyPlayerReady);\n    console.log('state playbackOn', this.state.playbackOn);\n    console.log('state playingRecordingId', this.props.playingRecordingId);\n    console.log('state playbackPaused', this.state.playbackPaused);\n    return (\n      <div className={styles.app}>\n        <h3>Spotify</h3>\n        <div className={styles.player}>\n          {this.state.spotifyPlayerReady && (\n            <div\n              onClick={() => {\n                if (!this.state.playbackOn) {\n                  this.startPlayback(this.props.playingRecordingId);\n                } else {\n                    console.log('click to pause')\n                  if (this.state.playbackPaused) {\n                    this.resumePlayback();\n                  }\n                }\n              }}\n            >\n              <FaPlay />\n            </div>\n          )}\n          {this.state.spotifyPlayerReady && this.state.playbackOn && (\n            <div\n              onClick={() => {\n                  console.log('')\n                if (!this.state.playbackPaused) {\n                  this.pauseTrack();\n                }\n              }}\n            >\n              <FaPause />\n            </div>\n          )}\n        </div>\n\n        <p className={styles.statusMessage}>{this.state.loadingState}</p>\n      </div>\n    );\n  }\n}\n\nexport default SpotifyPlayerContainer;\n"]},"metadata":{},"sourceType":"module"}