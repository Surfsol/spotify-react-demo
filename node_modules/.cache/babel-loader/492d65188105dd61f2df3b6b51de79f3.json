{"ast":null,"code":"import _slicedToArray from \"/home/russ/Documents/spotify/spotify-react-demo/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/russ/Documents/spotify/spotify-react-demo/src/index.js\";\n\nimport React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { setSpotifyAccess, setSpotifyAccessToken, setSpotifyTokenExpirationTime } from \"./LocalStorageData\";\nimport { SpotifyAccess } from \"./SpotifyAccess\";\nimport { getTokenFromResponse } from './login/spotify';\nvar hashStr = window.location.hash; // everything in address after #, here spotify puts successfull auth tokens\n\nvar searchStr = window.location.search; // everything in address after ?, here spotify puts access denials\n// const hashParams = decodeHashParams(hashStr.slice(1, hashStr.length));\n// const searchParams = decodeHashParams(searchStr.slice(1, searchStr.length));\n// console.log('hash',hashParams.access_token)\n// if (hashParams.access_token) {\n//     console.log('access', hashParams.access_token)\n//     setSpotifyAccess(SpotifyAccess.ALLOWED);\n//     setSpotifyAccessToken(hashParams.access_token);\n//     setSpotifyTokenExpirationTime(hashParams.expires_in);\n//     window.close();\n// } else if (searchParams.error) {\n//     setSpotifyAccess(SpotifyAccess.DENIED);\n//     window.close();\n// } else {\n//     ReactDOM.render(<App />, document.getElementById('root'));\n// }\n\n/**\n * decodes a parameter string (p1=v1&p2=v2&... syntax) into the object {p1: v1, p2: v2, ...}\n */\n\nvar decodeHashParams = function decodeHashParams() {\n  console.log();\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      token = _useState2[0],\n      setToken = _useState2[1];\n\n  useEffect(function () {\n    console.log('useEffect');\n    var hash = getTokenFromResponse();\n    console.log('hash useEff:', hash); //after get access token, clear from url\n\n    window.location.hash = \"\";\n    setToken(hash.access_token);\n  }, []); // console.log('in index')\n  // const hashParams: { [key: string]: string } = {};\n  // const a = /\\+/g;  // Regex for replacing addition symbol with a space\n  // const r = /([^&;=]+)=?([^&;]*)/g;\n  // const d = (s: string) => decodeURIComponent(s.replace(a, \" \"));\n  // let e;\n  // while (e = r.exec(str)) {\n  //     hashParams[d(e[1])] = d(e[2]);\n  // }\n\n  return /*#__PURE__*/React.createElement(App, {\n    token: token,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 12\n    }\n  });\n};\n\nexport default decodeHashParams;","map":{"version":3,"sources":["/home/russ/Documents/spotify/spotify-react-demo/src/index.js"],"names":["React","useEffect","useState","ReactDOM","App","setSpotifyAccess","setSpotifyAccessToken","setSpotifyTokenExpirationTime","SpotifyAccess","getTokenFromResponse","hashStr","window","location","hash","searchStr","search","decodeHashParams","console","log","token","setToken","access_token"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,SAAQC,gBAAR,EAA0BC,qBAA1B,EAAiDC,6BAAjD,QAAqF,oBAArF;AACA,SAAQC,aAAR,QAA4B,iBAA5B;AACA,SAAQC,oBAAR,QAAmC,iBAAnC;AAEA,IAAMC,OAAO,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhC,C,CAAsC;;AACtC,IAAMC,SAAS,GAAGH,MAAM,CAACC,QAAP,CAAgBG,MAAlC,C,CAA0C;AAC1C;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AACA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC7BC,EAAAA,OAAO,CAACC,GAAR;;AAD6B,kBAEEhB,QAAQ,EAFV;AAAA;AAAA,MAEjBiB,KAFiB;AAAA,MAEVC,QAFU;;AAG3BnB,EAAAA,SAAS,CAAC,YAAI;AACVgB,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,QAAML,IAAI,GAAGJ,oBAAoB,EAAjC;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BL,IAA5B,EAHU,CAIV;;AACAF,IAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,EAAvB;AACAO,IAAAA,QAAQ,CAACP,IAAI,CAACQ,YAAN,CAAR;AACD,GAPM,EAOL,EAPK,CAAT,CAH2B,CAY3B;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACA,sBAAO,oBAAC,GAAD;AAAK,IAAA,KAAK,EAAEF,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACH,CAvBD;;AAwBA,eAAeH,gBAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {setSpotifyAccess, setSpotifyAccessToken, setSpotifyTokenExpirationTime} from \"./LocalStorageData\";\nimport {SpotifyAccess} from \"./SpotifyAccess\";\nimport {getTokenFromResponse} from './login/spotify'\n\nconst hashStr = window.location.hash; // everything in address after #, here spotify puts successfull auth tokens\nconst searchStr = window.location.search; // everything in address after ?, here spotify puts access denials\n// const hashParams = decodeHashParams(hashStr.slice(1, hashStr.length));\n// const searchParams = decodeHashParams(searchStr.slice(1, searchStr.length));\n\n// console.log('hash',hashParams.access_token)\n// if (hashParams.access_token) {\n//     console.log('access', hashParams.access_token)\n//     setSpotifyAccess(SpotifyAccess.ALLOWED);\n//     setSpotifyAccessToken(hashParams.access_token);\n//     setSpotifyTokenExpirationTime(hashParams.expires_in);\n//     window.close();\n// } else if (searchParams.error) {\n//     setSpotifyAccess(SpotifyAccess.DENIED);\n//     window.close();\n// } else {\n//     ReactDOM.render(<App />, document.getElementById('root'));\n// }\n\n/**\n * decodes a parameter string (p1=v1&p2=v2&... syntax) into the object {p1: v1, p2: v2, ...}\n */\nconst decodeHashParams = () => {\n  console.log()\n        const[token, setToken] = useState()\n    useEffect(()=>{\n        console.log('useEffect')\n        const hash = getTokenFromResponse();\n        console.log('hash useEff:', hash)\n        //after get access token, clear from url\n        window.location.hash = \"\";\n        setToken(hash.access_token)\n      },[])\n\n    // console.log('in index')\n    // const hashParams: { [key: string]: string } = {};\n    // const a = /\\+/g;  // Regex for replacing addition symbol with a space\n    // const r = /([^&;=]+)=?([^&;]*)/g;\n    // const d = (s: string) => decodeURIComponent(s.replace(a, \" \"));\n    // let e;\n\n    // while (e = r.exec(str)) {\n    //     hashParams[d(e[1])] = d(e[2]);\n    // }\n    return <App token={token}/>;\n}\nexport default decodeHashParams"]},"metadata":{},"sourceType":"module"}