{"ast":null,"code":"import _classCallCheck from \"/home/russ/Documents/spotify/spotify-react-demo/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/russ/Documents/spotify/spotify-react-demo/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/russ/Documents/spotify/spotify-react-demo/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/russ/Documents/spotify/spotify-react-demo/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/russ/Documents/spotify/spotify-react-demo/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/russ/Documents/spotify/spotify-react-demo/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/home/russ/Documents/spotify/spotify-react-demo/src/SpotifyPlayerContainer.tsx\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react'; //loads script\n\nimport { ScriptCache } from './ScriptCache';\nimport { SpotifyAccess } from './SpotifyAccess';\nimport { getSpotifyAccess } from './LocalStorageData';\nimport { FaPause, FaPlay } from 'react-icons/fa';\nimport styles from './App.module.css';\n\nvar SpotifyPlayerContainer = /*#__PURE__*/function (_Component) {\n  _inherits(SpotifyPlayerContainer, _Component);\n\n  var _super = _createSuper(SpotifyPlayerContainer);\n\n  function SpotifyPlayerContainer(props) {\n    var _this;\n\n    _classCallCheck(this, SpotifyPlayerContainer);\n\n    _this = _super.call(this, props);\n    _this.connectToPlayerTimeout = void 0;\n\n    _this.spotifySDKCallback = function () {\n      window.onSpotifyWebPlaybackSDKReady = function () {\n        if (_this.state.spotifyAccess !== SpotifyAccess.DENIED) {\n          var spotifyPlayer = new Spotify.Player({\n            name: 'React Spotify Player',\n            getOAuthToken: function getOAuthToken(cb) {\n              cb(_this.state.spotifyAccessToken);\n            }\n          }); // Playback status updates\n\n          spotifyPlayer.addListener('player_state_changed', function (state) {\n            console.log('state in spotifyPlayer', state);\n          });\n\n          _this.setState({\n            loadingState: 'spotify scripts loaded',\n            spotifyPlayer: spotifyPlayer\n          });\n\n          if (_this.state.spotifyAccessToken !== null) {\n            _this.setState({\n              spotifyAccess: SpotifyAccess.ALLOWED,\n              loadingState: 'spotify token retrieved'\n            });\n\n            _this.connectToPlayer();\n          }\n        } else {\n          _this.setState({\n            loadingState: 'spotify authorization rejected'\n          });\n        }\n      };\n    };\n\n    _this.authorizeSpotifyFromStorage = function (e) {\n      console.log('in auth line 90', e);\n\n      if (e.key === 'spotifyAuthToken') {\n        var spotifyAccessToken = e.newValue;\n        var spotifyAccess = getSpotifyAccess(); //console.log('spotifyAccess', spotifyAccess);\n\n        if (spotifyAccess === SpotifyAccess.DENIED) {\n          _this.setState({\n            spotifyAccess: SpotifyAccess.DENIED,\n            loadingState: 'spotify access denied'\n          });\n        } else if (spotifyAccessToken !== null) {\n          _this.setState({\n            spotifyAccessToken: spotifyAccessToken,\n            spotifyAccess: SpotifyAccess.ALLOWED,\n            loadingState: 'spotify token retrieved'\n          });\n        }\n\n        _this.connectToPlayer();\n      }\n    };\n\n    _this.connectToPlayer = function () {\n      console.log('in connect player');\n\n      if (_this.state.spotifyPlayer) {\n        console.log('in clearTimeout');\n        clearTimeout(_this.connectToPlayerTimeout); // Ready\n\n        _this.state.spotifyPlayer.addListener('ready', function (_ref) {\n          var device_id = _ref.device_id;\n          console.log('Ready with Device ID', device_id);\n\n          _this.setState({\n            loadingState: 'spotify player ready',\n            spotifyDeviceId: device_id,\n            spotifyPlayerReady: true\n          });\n        }); // Not Ready\n\n\n        _this.state.spotifyPlayer.addListener('not_ready', function (_ref2) {\n          var device_id = _ref2.device_id;\n          console.log('Device ID has gone offline', device_id);\n        });\n\n        _this.state.spotifyPlayer.connect().then(function (ev) {\n          _this.setState({\n            loadingState: 'connected to player'\n          });\n        });\n      } else {\n        console.log('in timeout');\n        _this.connectToPlayerTimeout = setTimeout(_this.connectToPlayer.bind(_assertThisInitialized(_this)), 100000);\n      }\n    };\n\n    _this.startPlayback = function (spotify_uri) {\n      console.log('in initial startPlayback');\n      var _token = _this.state.spotifyAccessToken;\n      fetch(\"https://api.spotify.com/v1/me/player/play?\" + \"device_id=\" + _this.state.spotifyDeviceId, {\n        method: 'PUT',\n        body: JSON.stringify({\n          uris: [spotify_uri]\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': \"Bearer \".concat(_this.state.spotifyAccessToken)\n        } // data: '{\"uris\": [\"spotify:track:5ya2gsaIhTkAuWYEMB0nw5\"]}',\n        // beforeSend: function (xhr: any) {\n        //         xhr.setRequestHeader('Authorization', 'Bearer ' + _token);\n        //     },\n\n      }) // const url =\n      //   'https://api.spotify.com/v1/me/player/play?' +\n      //   'device_id=' +\n      //   this.state.spotifyDeviceId;\n      // const headers = {\n      //   'Content-Type': 'application/json',\n      //   Authorization: `Bearer ${this.state.spotifyAccessToken}`,\n      // };\n      // const body = JSON.stringify({ uris: [spotify_uri] });\n      // let params: RequestInit = {\n      //   headers: headers,\n      //   method: 'PUT',\n      //   body: body,\n      // };\n      // fetch(url, params)\n      .then(function (resolve) {\n        console.log('resolve status', resolve.status); // console.log('resolve line 159', resolve);\n\n        if (resolve.status === 403) {\n          _this.setState({\n            loadingState: 'you need to upgrade to premium for playback',\n            spotifyAccess: SpotifyAccess.NO_PREMIUM\n          });\n        } else {\n          _this.setState({\n            loadingState: 'playback started',\n            playbackOn: true,\n            playbackPaused: false\n          }); //  console.log('Started playback', this.state);\n\n        }\n      }).catch(function (error) {\n        _this.setState({\n          loadingState: 'playback error: ' + error\n        });\n      });\n    };\n\n    _this.resumePlayback = function () {\n      console.log('in resumePlayback');\n      fetch('https://api.spotify.com/v1/me/player/play?' + 'device_id=' + _this.state.spotifyDeviceId, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: \"Bearer \".concat(_this.state.spotifyAccessToken)\n        }\n      }).then(function (ev) {\n        _this.setState({\n          playbackPaused: false\n        });\n      });\n      console.log('Started playback', _this.state);\n    };\n\n    _this.pauseTrack = function () {\n      console.log('in paused');\n      fetch('https://api.spotify.com/v1/me/player/pause?' + 'device_id=' + _this.state.spotifyDeviceId, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: \"Bearer \".concat(_this.state.spotifyAccessToken)\n        }\n      }).then(function (ev) {\n        _this.setState({\n          playbackPaused: true\n        });\n      });\n    };\n\n    new ScriptCache([{\n      name: 'https://sdk.scdn.co/spotify-player.js',\n      callback: _this.spotifySDKCallback\n    }]);\n    window.addEventListener('storage', _this.authorizeSpotifyFromStorage);\n    _this.state = {\n      loadingState: 'loading scripts',\n      spotifyAccessToken: props.token,\n      spotifyDeviceId: '',\n      spotifyAuthorizationGranted: false,\n      spotifyPlayerConnected: true,\n      spotifyPlayerReady: false,\n      spotifySDKLoaded: false,\n      spotifyPlayer: undefined,\n      spotifyAccess: SpotifyAccess.NOT_REQUESTED,\n      playbackOn: false,\n      playbackPaused: false\n    };\n    return _this;\n  }\n\n  _createClass(SpotifyPlayerContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      console.log; // console.log('state spotifyPlayerReady', this.state.spotifyPlayerReady);\n      // console.log('state playbackOn', this.state.playbackOn);\n      // console.log('state playingRecordingId', this.props.playingRecordingId);\n      // console.log('state playbackPaused', this.state.playbackPaused);\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: styles.app,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 9\n        }\n      }, \"Spotify\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: styles.player,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 9\n        }\n      }, this.state.spotifyPlayerReady && /*#__PURE__*/React.createElement(\"div\", {\n        onClick: function onClick() {\n          if (!_this2.state.playbackOn) {\n            _this2.startPlayback(_this2.props.playingRecordingId);\n          } else {\n            console.log('click to pause');\n\n            if (_this2.state.playbackPaused) {\n              _this2.resumePlayback();\n            }\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(FaPlay, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 15\n        }\n      })), this.state.spotifyPlayerReady && this.state.playbackOn && /*#__PURE__*/React.createElement(\"div\", {\n        onClick: function onClick() {\n          console.log('onClick pause 280');\n\n          if (!_this2.state.playbackPaused) {\n            _this2.pauseTrack();\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(FaPause, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 15\n        }\n      }))), /*#__PURE__*/React.createElement(\"p\", {\n        className: styles.statusMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 9\n        }\n      }, this.state.loadingState));\n    }\n  }]);\n\n  return SpotifyPlayerContainer;\n}(Component);\n\nexport default SpotifyPlayerContainer;","map":{"version":3,"sources":["/home/russ/Documents/spotify/spotify-react-demo/src/SpotifyPlayerContainer.tsx"],"names":["React","Component","ScriptCache","SpotifyAccess","getSpotifyAccess","FaPause","FaPlay","styles","SpotifyPlayerContainer","props","connectToPlayerTimeout","spotifySDKCallback","window","onSpotifyWebPlaybackSDKReady","state","spotifyAccess","DENIED","spotifyPlayer","Spotify","Player","name","getOAuthToken","cb","spotifyAccessToken","addListener","console","log","setState","loadingState","ALLOWED","connectToPlayer","authorizeSpotifyFromStorage","e","key","newValue","clearTimeout","device_id","spotifyDeviceId","spotifyPlayerReady","connect","then","ev","setTimeout","bind","startPlayback","spotify_uri","_token","fetch","method","body","JSON","stringify","uris","headers","resolve","status","NO_PREMIUM","playbackOn","playbackPaused","catch","error","resumePlayback","Authorization","pauseTrack","callback","addEventListener","token","spotifyAuthorizationGranted","spotifyPlayerConnected","spotifySDKLoaded","undefined","NOT_REQUESTED","app","player","playingRecordingId","statusMessage"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n//loads script\nimport { ScriptCache } from './ScriptCache';\nimport SpotifyAuthWindow from './SpotifyAuthWindow';\nimport { SpotifyAccess } from './SpotifyAccess';\nimport { getSpotifyAccess, getSpotifyAccessToken } from './LocalStorageData';\nimport { FaPause, FaPlay } from 'react-icons/fa';\nimport styles from './App.module.css';\nimport { puts } from 'util';\n\ninterface ISpotifyPlayerProps {\n  playingRecordingId: string;\n  token: string;\n}\n\ninterface ISpotifyPlayerState {\n  loadingState: string;\n  spotifyAccessToken: string;\n  spotifyAccess: SpotifyAccess;\n  spotifyDeviceId: string;\n  spotifySDKLoaded: boolean;\n  spotifyAuthorizationGranted: boolean;\n  spotifyPlayerConnected: boolean;\n  spotifyPlayerReady: boolean;\n  spotifyPlayer: Spotify.SpotifyPlayer | undefined;\n  playbackOn: boolean;\n  playbackPaused: boolean;\n}\n\nclass SpotifyPlayerContainer extends Component<\n  ISpotifyPlayerProps,\n  ISpotifyPlayerState\n> {\n  private connectToPlayerTimeout: any;\n\n  public constructor(props: ISpotifyPlayerProps) {\n    super(props);\n\n    new ScriptCache([\n      {\n        name: 'https://sdk.scdn.co/spotify-player.js',\n        callback: this.spotifySDKCallback,\n      },\n    ]);\n\n    window.addEventListener('storage', this.authorizeSpotifyFromStorage);\n\n    this.state = {\n      loadingState: 'loading scripts',\n      spotifyAccessToken: props.token,\n      spotifyDeviceId: '',\n      spotifyAuthorizationGranted: false,\n      spotifyPlayerConnected: true,\n      spotifyPlayerReady: false,\n      spotifySDKLoaded: false,\n      spotifyPlayer: undefined,\n      spotifyAccess: SpotifyAccess.NOT_REQUESTED,\n      playbackOn: false,\n      playbackPaused: false,\n    };\n  }\n\n  private spotifySDKCallback = () => {\n    window.onSpotifyWebPlaybackSDKReady = () => {\n      if (this.state.spotifyAccess !== SpotifyAccess.DENIED) {\n        const spotifyPlayer = new Spotify.Player({\n          name: 'React Spotify Player',\n          getOAuthToken: (cb) => {\n            cb(this.state.spotifyAccessToken);\n          },\n        });\n\n        // Playback status updates\n        spotifyPlayer.addListener('player_state_changed', (state) => {\n         console.log('state in spotifyPlayer',state);\n        });\n\n        this.setState({\n          loadingState: 'spotify scripts loaded',\n          spotifyPlayer,\n        });\n\n        if (this.state.spotifyAccessToken !== null) {\n          this.setState({\n            spotifyAccess: SpotifyAccess.ALLOWED,\n            loadingState: 'spotify token retrieved',\n          });\n          this.connectToPlayer();\n        }\n      } else {\n        this.setState({ loadingState: 'spotify authorization rejected' });\n      }\n    };\n  };\n\n  private authorizeSpotifyFromStorage = (e: StorageEvent) => {\n    console.log('in auth line 90', e);\n    if (e.key === 'spotifyAuthToken') {\n      const spotifyAccessToken = e.newValue;\n\n      const spotifyAccess = getSpotifyAccess();\n      //console.log('spotifyAccess', spotifyAccess);\n      if (spotifyAccess === SpotifyAccess.DENIED) {\n        this.setState({\n          spotifyAccess: SpotifyAccess.DENIED,\n          loadingState: 'spotify access denied',\n        });\n      } else if (spotifyAccessToken !== null) {\n        this.setState({\n          spotifyAccessToken: spotifyAccessToken,\n          spotifyAccess: SpotifyAccess.ALLOWED,\n          loadingState: 'spotify token retrieved',\n        });\n      }\n      this.connectToPlayer();\n    }\n  };\n\n  private connectToPlayer = () => {\n    console.log('in connect player');\n    if (this.state.spotifyPlayer) {\n      console.log('in clearTimeout')\n      clearTimeout(this.connectToPlayerTimeout);\n      // Ready\n      this.state.spotifyPlayer.addListener('ready', ({ device_id }) => {\n        console.log('Ready with Device ID', device_id);\n        this.setState({\n          loadingState: 'spotify player ready',\n          spotifyDeviceId: device_id,\n          spotifyPlayerReady: true,\n        });\n      });\n\n      // Not Ready\n      this.state.spotifyPlayer.addListener('not_ready', ({ device_id }) => {\n        console.log('Device ID has gone offline', device_id);\n      });\n\n      this.state.spotifyPlayer.connect().then((ev: any) => {\n        this.setState({ loadingState: 'connected to player' });\n      });\n    } else {\n        console.log('in timeout')\n      this.connectToPlayerTimeout = setTimeout(\n        this.connectToPlayer.bind(this),\n        100000\n      );\n    }\n  };\n  // private startPlayback  {\n  //     $.ajax({\n  //       url: 'https://api.spotify.com/v1/me/player/play?device_id=' + device_id,\n  //       type: 'PUT',\n  //       data: '{\"uris\": [\"spotify:track:5ya2gsaIhTkAuWYEMB0nw5\"]}',\n  //       beforeSend: function (xhr) {\n  //         xhr.setRequestHeader('Authorization', 'Bearer ' + _token);\n  //       },\n  //       success: function (data) {\n  //         console.log(data);\n  //       },\n  //     });\n  //   }\n\n  private startPlayback = (spotify_uri: string) => {\n    console.log('in initial startPlayback')\n    const _token = this.state.spotifyAccessToken;\n    fetch(\"https://api.spotify.com/v1/me/player/play?\" +\n        \"device_id=\" + this.state.spotifyDeviceId, {\n        method: 'PUT',\n        body: JSON.stringify({uris: [spotify_uri]}),\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${this.state.spotifyAccessToken}`\n        }\n        // data: '{\"uris\": [\"spotify:track:5ya2gsaIhTkAuWYEMB0nw5\"]}',\n        // beforeSend: function (xhr: any) {\n        //         xhr.setRequestHeader('Authorization', 'Bearer ' + _token);\n        //     },\n    })\n    // const url =\n    //   'https://api.spotify.com/v1/me/player/play?' +\n    //   'device_id=' +\n    //   this.state.spotifyDeviceId;\n    // const headers = {\n    //   'Content-Type': 'application/json',\n    //   Authorization: `Bearer ${this.state.spotifyAccessToken}`,\n    // };\n    // const body = JSON.stringify({ uris: [spotify_uri] });\n    // let params: RequestInit = {\n    //   headers: headers,\n    //   method: 'PUT',\n    //   body: body,\n    // };\n\n    // fetch(url, params)\n      .then((resolve) => {\n        console.log('resolve status',resolve.status)\n       // console.log('resolve line 159', resolve);\n        if (resolve.status === 403) {\n          this.setState({\n            loadingState: 'you need to upgrade to premium for playback',\n            spotifyAccess: SpotifyAccess.NO_PREMIUM,\n          });\n        } else {\n          this.setState({\n            loadingState: 'playback started',\n            playbackOn: true,\n            playbackPaused: false,\n          });\n        //  console.log('Started playback', this.state);\n        }\n      })\n      .catch((error) => {\n        this.setState({ loadingState: 'playback error: ' + error });\n      });\n  };\n\n  private resumePlayback = () => {\n    console.log('in resumePlayback')\n    fetch(\n      'https://api.spotify.com/v1/me/player/play?' +\n        'device_id=' +\n        this.state.spotifyDeviceId,\n      {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${this.state.spotifyAccessToken}`,\n        },\n      }\n    ).then((ev) => {\n      this.setState({ playbackPaused: false });\n    });\n    console.log('Started playback', this.state);\n  };\n\n  private pauseTrack = () => {\n    console.log('in paused')\n    fetch(\n      'https://api.spotify.com/v1/me/player/pause?' +\n        'device_id=' +\n        this.state.spotifyDeviceId,\n      {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${this.state.spotifyAccessToken}`,\n        },\n      }\n    ).then((ev) => {\n      this.setState({ playbackPaused: true });\n    });\n  };\n\n  render() {\n    console.log\n    // console.log('state spotifyPlayerReady', this.state.spotifyPlayerReady);\n    // console.log('state playbackOn', this.state.playbackOn);\n    // console.log('state playingRecordingId', this.props.playingRecordingId);\n    // console.log('state playbackPaused', this.state.playbackPaused);\n    return (\n      <div className={styles.app}>\n        <h3>Spotify</h3>\n        <div className={styles.player}>\n          {this.state.spotifyPlayerReady && (\n            <div\n              onClick={() => {\n                if (!this.state.playbackOn) {\n                  this.startPlayback(this.props.playingRecordingId);\n                } else {\n                    console.log('click to pause')\n                  if (this.state.playbackPaused) {\n                    this.resumePlayback();\n                  }\n                }\n              }}\n            >\n              <FaPlay />\n            </div>\n          )}\n          {this.state.spotifyPlayerReady && this.state.playbackOn && (\n            <div\n              onClick={() => {\n                  console.log('onClick pause 280')\n                if (!this.state.playbackPaused) {\n                  this.pauseTrack();\n                }\n              }}\n            >\n              <FaPause />\n            </div>\n          )}\n        </div>\n\n        <p className={styles.statusMessage}>{this.state.loadingState}</p>\n      </div>\n    );\n  }\n}\n\nexport default SpotifyPlayerContainer;\n"]},"metadata":{},"sourceType":"module"}